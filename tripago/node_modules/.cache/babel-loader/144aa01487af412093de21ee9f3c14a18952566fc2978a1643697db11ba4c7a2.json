{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nexport const useFetch = url => {\n  _s();\n  const [data, setData] = useState(null);\n  const [isPending, setIsPending] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const controller = new AbortController();\n    const fetchData = async () => {\n      setIsPending(true);\n      try {\n        const res = await fetch(url, {\n          signal: controller.signal\n        });\n        if (!res.ok) {\n          throw new Error(res.statusText);\n        }\n        const json = await res.json();\n        setIsPending(false);\n        setData(json);\n        setError(null);\n      } catch (err) {\n        if (err.name === \"AbortError\") {\n          console.log('the fetch was aborted');\n        } else {\n          setIsPending(false);\n          setError(\"Could not fetch the data\");\n          console.log(err.message);\n        }\n      }\n    };\n    fetchData();\n    return () => {\n      controller.abort();\n    };\n  }, [url]);\n  return {\n    data,\n    isPending,\n    error\n  };\n};\n_s(useFetch, \"Nv+1/iI0zq+2TB3Cnf0Mf/1lILU=\");","map":{"version":3,"names":["useState","useEffect","useFetch","url","data","setData","isPending","setIsPending","error","setError","controller","AbortController","fetchData","res","fetch","signal","ok","Error","statusText","json","err","name","console","log","message","abort"],"sources":["D:/Projects/react-training/tripago/src/hooks/useFetch.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nexport const useFetch = (url) => {\r\n  const [data, setData] = useState(null);\r\n  const [isPending, setIsPending] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const controller = new AbortController();\r\n\r\n    const fetchData = async () => {\r\n      setIsPending(true);\r\n\r\n      try {\r\n        const res = await fetch(url, { signal: controller.signal });\r\n        if (!res.ok) {\r\n          throw new Error(res.statusText);\r\n        }\r\n        const json = await res.json();\r\n\r\n        setIsPending(false);\r\n        setData(json);\r\n        setError(null);\r\n      } catch (err) {\r\n        if(err.name === \"AbortError\"){\r\n            console.log('the fetch was aborted')\r\n        } else {\r\n        setIsPending(false);\r\n        setError(\"Could not fetch the data\");\r\n        console.log(err.message);\r\n        }\r\n      }\r\n    };\r\n    fetchData();\r\n\r\n    return () => {\r\n        controller.abort()\r\n    };\r\n  }, [url]);\r\n\r\n  return { data, isPending, error };\r\n};\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,OAAO,MAAMC,QAAQ,GAAIC,GAAG,IAAK;EAAA;EAC/B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGL,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACM,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACd,MAAMS,UAAU,GAAG,IAAIC,eAAe,EAAE;IAExC,MAAMC,SAAS,GAAG,YAAY;MAC5BL,YAAY,CAAC,IAAI,CAAC;MAElB,IAAI;QACF,MAAMM,GAAG,GAAG,MAAMC,KAAK,CAACX,GAAG,EAAE;UAAEY,MAAM,EAAEL,UAAU,CAACK;QAAO,CAAC,CAAC;QAC3D,IAAI,CAACF,GAAG,CAACG,EAAE,EAAE;UACX,MAAM,IAAIC,KAAK,CAACJ,GAAG,CAACK,UAAU,CAAC;QACjC;QACA,MAAMC,IAAI,GAAG,MAAMN,GAAG,CAACM,IAAI,EAAE;QAE7BZ,YAAY,CAAC,KAAK,CAAC;QACnBF,OAAO,CAACc,IAAI,CAAC;QACbV,QAAQ,CAAC,IAAI,CAAC;MAChB,CAAC,CAAC,OAAOW,GAAG,EAAE;QACZ,IAAGA,GAAG,CAACC,IAAI,KAAK,YAAY,EAAC;UACzBC,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;QACxC,CAAC,MAAM;UACPhB,YAAY,CAAC,KAAK,CAAC;UACnBE,QAAQ,CAAC,0BAA0B,CAAC;UACpCa,OAAO,CAACC,GAAG,CAACH,GAAG,CAACI,OAAO,CAAC;QACxB;MACF;IACF,CAAC;IACDZ,SAAS,EAAE;IAEX,OAAO,MAAM;MACTF,UAAU,CAACe,KAAK,EAAE;IACtB,CAAC;EACH,CAAC,EAAE,CAACtB,GAAG,CAAC,CAAC;EAET,OAAO;IAAEC,IAAI;IAAEE,SAAS;IAAEE;EAAM,CAAC;AACnC,CAAC;AAAC,GAvCWN,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}